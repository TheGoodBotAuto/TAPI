import { Injectable, Inject, OnInit } from '@angular/core';
import { Http, Response, URLSearchParams, RequestOptions, Headers } from '@angular/http';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';

import { Server } from '../server/shared/server.type';
import { ServerResult } from '../server/shared/server-result.type';
import { Vulnerability } from '../vulnerability/shared/vulnerability.type';
import { VulnerabilityResult } from '../vulnerability/shared/vulnerability-result.type';
import { UserRoleResult } from './user-role-result.type';


import { AuthService } from '../../shared/services/auth.service'

@Injectable()
export class VulnerabilityService implements OnInit{
    private header: Headers;
    constructor(private http:Http, private authService: AuthService ){
        
    }

    ngOnInit(){
      let header = new Headers({ 'Authorization': this.authService.getAuthorizationHeaderValue() });

    }
    ///api/TAPOUT/getServerSummaries '/api/TAPOUT/getVulnerabilityDetails'
   
    getServerSummaries(id: string, pageNo:number, numItems:number){
        let params: URLSearchParams = new URLSearchParams();
        params.set('pagenum',pageNo.toString());
        params.set('maxitems',numItems.toString());
        let header = new Headers({ 'Authorization': this.authService.getAuthorizationHeaderValue() });
        let options = new RequestOptions({ headers: header , params: params});
        return this.http.get('http://localhost:5001/api/server/'+id,options)
            .map(response => response.json() as ServerResult)
            .toPromise();  
    }

    getVulnerabilityDetails(pageNo:number, numItems:number){
        let params: URLSearchParams = new URLSearchParams();
        params.set('pagenum',pageNo.toString());
        params.set('maxitems',numItems.toString());
        let header = new Headers({ 'Authorization': this.authService.getAuthorizationHeaderValue() });
        let options = new RequestOptions({ headers: header , params: params});
        return this.http.get('http://localhost:5001/api/report',options)
            .map(response => response.json() as Vulnerability[])
            .toPromise();  
    }

    getServerDetails(id: string, pageNo:number, numItems:number){
        let params: URLSearchParams = new URLSearchParams();
        params.set('pagenum',pageNo.toString());
        params.set('maxitems',numItems.toString());
        let header = new Headers({ 'Authorization': this.authService.getAuthorizationHeaderValue() });
        let options = new RequestOptions({ headers: header, params:params });
        return this.http.get('http://localhost:5001/api/server/details/'+id,options)
            .map(response => response.json() as VulnerabilityResult)
            .toPromise();  
    }

    getVulnerabilityDetails2(reportID:string, pageNo:number, numItems:number){
        let params: URLSearchParams = new URLSearchParams();
        params.set('pagenum',pageNo.toString());
        params.set('maxitems',numItems.toString());
        let header = new Headers({ 'Authorization': this.authService.getAuthorizationHeaderValue() });
        let options = new RequestOptions({ headers: header , params: params});
        return this.http.get('http://localhost:5001/api/report/'+reportID,options)
            .map(response => response.json() as VulnerabilityResult)
            .toPromise();

    }

    getUserReportRoles(){
        let header = new Headers({ 'Authorization': this.authService.getAuthorizationHeaderValue() });
        let options = new RequestOptions({ headers: header });
        return this.http.get('http://localhost:5001/api/report/UserReportRoles',options)
            .map(response => response.json() as UserRoleResult)
            .toPromise(); 
    }

    uploadVulnerabilityDecisions(reportID:string, decisions:Vulnerability[]){
        let header = new Headers({ 'Authorization': this.authService.getAuthorizationHeaderValue(),'Content-Type': 'application/json' });
        let options = new RequestOptions({ headers: header });
        return this.http.post('http://localhost:5001/api/report',JSON.stringify(decisions),options)
            .map(response => response.json() as UserRoleResult)
            .toPromise(); 
    }

    uploadServerDecisions(reportID:string, decisions:Server[]){
        let header = new Headers({ 'Authorization': this.authService.getAuthorizationHeaderValue(),'Content-Type': 'application/json' });
        let options = new RequestOptions({ headers: header });
        return this.http.post('http://localhost:5001/api/server',JSON.stringify(decisions),options)
            .map(response => response.json() as UserRoleResult)
            .toPromise(); 
    }
}
