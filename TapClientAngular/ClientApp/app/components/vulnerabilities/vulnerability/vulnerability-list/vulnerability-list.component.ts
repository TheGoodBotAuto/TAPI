﻿import { Component, OnInit, OnDestroy, PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { Router } from '@angular/router';
import { Vulnerability } from '../shared/vulnerability.type';
import { SeverityLevel } from '../../shared/severity-level.enum';
import { AppSettings } from '../../../shared/app-settings.type';
import { VulnerabilityService } from '../../shared/vulnerability.service';
import { UserRoleResult } from '../../shared/user-role-result.type';
import { UserRole } from '../../shared/user-role.type';
import { NgForm } from '@angular/forms';


@Component({
    selector: 'vulnerability-list',
    templateUrl: './vulnerability-list.component.html'
})

export class VulnerabilityListComponent implements OnInit, OnDestroy {
    findings: Vulnerability[];
    reportTypes: UserRole[];
    id: string;
    reportID: string;
    private sub: any;
    public maxSize: number = 5;
    public totalItems: number = 100;
    public currentPage: number = 1;
    public numPages: number = 100;
    public itemsPerPage: number=10;
    severityLevel=SeverityLevel
    remediationResponses=AppSettings.REMEDIATION_RESPONSES;


    isBrowser: boolean;

    constructor(private vulnerabilityService: VulnerabilityService, private route: ActivatedRoute, private router: Router, @Inject(PLATFORM_ID) platformId: Object) {
      this.isBrowser=isPlatformBrowser(platformId);
    }
        
    ngOnInit() { 
        this.getReportTypes()
    }

    getReportTypes(){
        this.sub = this.route.params.subscribe(params => {
           this.vulnerabilityService.getUserReportRoles()
                .then (results =>{
                    this.reportTypes=results.results
                    this.reportID=String(this.reportTypes[0].reportNameID)
                    this.getItems(1)
                });

        });

    }

    getItems(pageNo: number) {
        this.sub = this.route.params.subscribe(params => {
           this.id = params['id']
           console.log(this.id)

        if (this.id!=undefined){
            this.vulnerabilityService.getServerDetails(this.id,pageNo, this.itemsPerPage)
                .then (results =>{
                    this.findings=results.results
                    this.totalItems=results.count
                });

        }
        else{
            this.vulnerabilityService.getVulnerabilityDetails2(this.reportID, pageNo, this.itemsPerPage)
                .then (results =>{
                    this.findings=results.results
                    this.totalItems=results.count
                });
        }

        });

    }

    ngOnDestroy(){
      this.sub.unsubscribe();
    }

    navigateTo(value: string){
      if (value == 'Server Summary'){
          this.router.navigate(['/vulnerabilities/server']);
      }
      else if (value == "Vulnerability Details"){
          this.router.navigate(['/vulnerabilities/details']);
      }
    }
  loadReport(value: string){
     this.reportID=value;
     this.getItems(1);
  }
  //find out why this is never called and see live data
  public onSubmit(form: NgForm) { 
     console.log('I submitted'); 
     let values: Vulnerability[]= new Array<Vulnerability>();
     for(var i=0;i<this.itemsPerPage;i++){
        console.log(form.value['uniqueID-'+String(i)]);
        let vuln= new Vulnerability();
        vuln.uniqueID=form.value['uniqueID-'+String(i)];
        vuln.decision=form.value['decision-'+String(i)];
        vuln.comment=form.value['comments-'+String(i)];
        if(vuln.decision){
           values.push(vuln);
        }


     }
     if(values.length>0){
        this.vulnerabilityService.uploadVulnerabilityDecisions(this.reportID,values)
     }
     console.log(values.length);
  }
 
  public setPage(pageNo: number): void {
    this.currentPage = pageNo;
  }
 
  public pageChanged(event: any): void {
    console.log('Page changed to: ' + event.page);
    console.log('Number items per page: ' + event.itemsPerPage);
    this.getItems(event.page)
  }
}